/*
==================================================================
Analysed the data from gold view.
EDA:-
Database Exploration, Dimensions Exploration, Data Exploration
Measure Exploratin, Ranking, Magnitude.
==================================================================
*/
--Retrive a list of unique countries from which customers originate.
USE Datawarehouse;
SELECT * FROM gold.dim_customers;
SELECT DISTINCT country FROM gold.dim_customers;

--Retrieve a list of unique categories, subcatogaries and products.

SELECT * FROM gold.dim_products;

SELECT DISTINCT category FROM gold.dim_products;
SELECT DISTINCT subcategory FROM gold.dim_products;
SELECT DISTINCT product_name FROM gold.dim_products;

--Determine the first and last order date and the total duration in months.

SELECT * FROM gold.fact_sales;
SELECT 
MIN(order_date) AS first_order,
MAX(order_date) AS last_order,
DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS orders_duration
FROM gold.fact_sales;

--Find the youngest and oldest customer based on birthdate.

SELECT * FROM gold.dim_customers;

SELECT 
MIN(birthdate) AS oldest_customer,
DATEDIFF(year, min(birthdate), getdate()) as oldest_customer_age,
MAX(birthdate) AS young_customer,
DATEDIFF(year, max(birthdate), getdate()) as youngest_customer_age
FROM gold.dim_customers;

--Measure Exploration
SELECT * FROM gold.fact_sales

--Find the total sales.
SELECT sum(sales_amount) as total_sales FROM gold.fact_sales;

--Find how many items are sold.
SELECT sum(quantity) as total_quantity FROM gold.fact_sales

--find the average selling price.
SELECT avg(price) as avg_Price FROM gold.fact_sales

--find the total number of orders
SELECT COUNT(order_number) as Total_orders from gold.fact_sales
SELECT COUNT(DISTINCT order_number) as Total_orders from gold.fact_sales

--Find the total no.of products
SELECT * FROM gold.dim_products
SELECT COUNT(DISTINCT product_name) as Total_Products FROM gold.dim_products

--Find the total no.of customers
SELECT * FROM gold.dim_customers
SELECT COUNT(customer_key) as Total_Customers FROM gold.dim_customers

--Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) as Total_Customers FROM gold.dim_customers

--Report
SELECT 'Total Sales' AS measure_name, sum(sales_amount) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', sum(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', avg(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) from gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM gold.dim_customers

--Magnitude Analysis
--Find total customers by countries
SELECT
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

--Find total customers by gender
SELECT
gender,
count(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

--Find total customers by category
SELECT
category,
count(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

--what is the average costs in each category
SELECT
category,
AVG(cost) as Avg_Cost
FROM gold.dim_products
GROUP BY Category
ORDER BY Avg_cost DESC;

--what is the total revenue generated for each category
--here we have two tables.
SELECT * FROM gold.dim_products
SELECT * FROM gold.fact_sales

SELECT
p.category,
sum(sales_amount) as total_revenue
FROM gold.dim_products as p
LEFT JOIN gold.fact_sales as f
ON p.product_key = f.product_key
GROUP BY category
ORDER BY total_revenue;

SELECT DISTINCT category FROM gold.dim_products

--what is the totalrevenue generated by each customer
--here it is connected to two table, customers and fact
SELECT * FROM gold.dim_customers
SELECT * FROM gold.fact_sales

SELECT
c.customer_key,
c.first_name,
c.last_name,
SUM(sales_amount) as total_revenue_by_customer
FROM gold.fact_sales as f
LEFT JOIN gold.dim_customers as c
ON c.customer_key = f.customer_key
GROUP BY
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC;

--what is the distribution of sold items across countries.
SELECT
c.country,
SUM(f.quantity) as total_sold_items
FROM gold.fact_sales as f
LEFT JOIN gold.dim_customers as c
ON c.customer_key = f.customer_key
GROUP BY country
ORDER BY total_sold_items DESC;

--which top 5 products generating the highest revenue
--simple ranking
SELECT TOP 5
p.product_name,
SUM(sales_amount) as total_revenue
FROM gold.fact_sales as f
LEFT JOIN gold.dim_products as p
ON p.product_key = f.product_key
GROUP BY product_name
ORDER BY total_revenue DESC;

--which Bottom 5 products generating the highest revenue
--there is no key like bottom, it simple just put ascending
SELECT TOP 5
p.product_name,
SUM(sales_amount) as total_revenue
FROM gold.fact_sales as f
LEFT JOIN gold.dim_products as p
ON p.product_key = f.product_key
GROUP BY product_name
ORDER BY total_revenue ASC;

--Top 10 customers who have generated thehighest revenue.
SELECT TOP 10
c.customer_key,
c.first_name,
c.last_name,
SUM(sales_amount) as total_revenue_by_customer
FROM gold.fact_sales as f
LEFT JOIN gold.dim_customers as c
ON c.customer_key = f.customer_key
GROUP BY
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue_by_customer DESC
